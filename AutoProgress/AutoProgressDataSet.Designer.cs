//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace AutoProgress {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("AutoProgressDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AutoProgressDataSet : System.Data.DataSet {
        
        private FilasPlantillasDataTable tableFilasPlantillas;
        
        private TestsDataTable tableTests;
        
        private PlantillasDataTable tablePlantillas;
        
        private PreguntasDataTable tablePreguntas;
        
        private RealizacionesDataTable tableRealizaciones;
        
        private System.Data.DataRelation relationFK_FilasPlantillas_Plantillas;
        
        private System.Data.DataRelation relationFK_Tests_Plantillas;
        
        private System.Data.DataRelation relationFK_Preguntas_Tests;
        
        private System.Data.DataRelation relationFK_Realizaciones_Tests;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AutoProgressDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AutoProgressDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FilasPlantillas"] != null)) {
                    base.Tables.Add(new FilasPlantillasDataTable(ds.Tables["FilasPlantillas"]));
                }
                if ((ds.Tables["Tests"] != null)) {
                    base.Tables.Add(new TestsDataTable(ds.Tables["Tests"]));
                }
                if ((ds.Tables["Plantillas"] != null)) {
                    base.Tables.Add(new PlantillasDataTable(ds.Tables["Plantillas"]));
                }
                if ((ds.Tables["Preguntas"] != null)) {
                    base.Tables.Add(new PreguntasDataTable(ds.Tables["Preguntas"]));
                }
                if ((ds.Tables["Realizaciones"] != null)) {
                    base.Tables.Add(new RealizacionesDataTable(ds.Tables["Realizaciones"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FilasPlantillasDataTable FilasPlantillas {
            get {
                return this.tableFilasPlantillas;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestsDataTable Tests {
            get {
                return this.tableTests;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlantillasDataTable Plantillas {
            get {
                return this.tablePlantillas;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PreguntasDataTable Preguntas {
            get {
                return this.tablePreguntas;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RealizacionesDataTable Realizaciones {
            get {
                return this.tableRealizaciones;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            AutoProgressDataSet cln = ((AutoProgressDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FilasPlantillas"] != null)) {
                    base.Tables.Add(new FilasPlantillasDataTable(ds.Tables["FilasPlantillas"]));
                }
                if ((ds.Tables["Tests"] != null)) {
                    base.Tables.Add(new TestsDataTable(ds.Tables["Tests"]));
                }
                if ((ds.Tables["Plantillas"] != null)) {
                    base.Tables.Add(new PlantillasDataTable(ds.Tables["Plantillas"]));
                }
                if ((ds.Tables["Preguntas"] != null)) {
                    base.Tables.Add(new PreguntasDataTable(ds.Tables["Preguntas"]));
                }
                if ((ds.Tables["Realizaciones"] != null)) {
                    base.Tables.Add(new RealizacionesDataTable(ds.Tables["Realizaciones"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFilasPlantillas = ((FilasPlantillasDataTable)(base.Tables["FilasPlantillas"]));
            if ((initTable == true)) {
                if ((this.tableFilasPlantillas != null)) {
                    this.tableFilasPlantillas.InitVars();
                }
            }
            this.tableTests = ((TestsDataTable)(base.Tables["Tests"]));
            if ((initTable == true)) {
                if ((this.tableTests != null)) {
                    this.tableTests.InitVars();
                }
            }
            this.tablePlantillas = ((PlantillasDataTable)(base.Tables["Plantillas"]));
            if ((initTable == true)) {
                if ((this.tablePlantillas != null)) {
                    this.tablePlantillas.InitVars();
                }
            }
            this.tablePreguntas = ((PreguntasDataTable)(base.Tables["Preguntas"]));
            if ((initTable == true)) {
                if ((this.tablePreguntas != null)) {
                    this.tablePreguntas.InitVars();
                }
            }
            this.tableRealizaciones = ((RealizacionesDataTable)(base.Tables["Realizaciones"]));
            if ((initTable == true)) {
                if ((this.tableRealizaciones != null)) {
                    this.tableRealizaciones.InitVars();
                }
            }
            this.relationFK_FilasPlantillas_Plantillas = this.Relations["FK_FilasPlantillas_Plantillas"];
            this.relationFK_Tests_Plantillas = this.Relations["FK_Tests_Plantillas"];
            this.relationFK_Preguntas_Tests = this.Relations["FK_Preguntas_Tests"];
            this.relationFK_Realizaciones_Tests = this.Relations["FK_Realizaciones_Tests"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AutoProgressDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AutoProgressDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFilasPlantillas = new FilasPlantillasDataTable();
            base.Tables.Add(this.tableFilasPlantillas);
            this.tableTests = new TestsDataTable();
            base.Tables.Add(this.tableTests);
            this.tablePlantillas = new PlantillasDataTable();
            base.Tables.Add(this.tablePlantillas);
            this.tablePreguntas = new PreguntasDataTable();
            base.Tables.Add(this.tablePreguntas);
            this.tableRealizaciones = new RealizacionesDataTable();
            base.Tables.Add(this.tableRealizaciones);
            this.relationFK_FilasPlantillas_Plantillas = new System.Data.DataRelation("FK_FilasPlantillas_Plantillas", new System.Data.DataColumn[] {
                        this.tablePlantillas.codigoColumn}, new System.Data.DataColumn[] {
                        this.tableFilasPlantillas.plantillaColumn}, false);
            this.Relations.Add(this.relationFK_FilasPlantillas_Plantillas);
            this.relationFK_Tests_Plantillas = new System.Data.DataRelation("FK_Tests_Plantillas", new System.Data.DataColumn[] {
                        this.tablePlantillas.codigoColumn}, new System.Data.DataColumn[] {
                        this.tableTests.plantillaColumn}, false);
            this.Relations.Add(this.relationFK_Tests_Plantillas);
            this.relationFK_Preguntas_Tests = new System.Data.DataRelation("FK_Preguntas_Tests", new System.Data.DataColumn[] {
                        this.tableTests.codigoColumn}, new System.Data.DataColumn[] {
                        this.tablePreguntas.testColumn}, false);
            this.Relations.Add(this.relationFK_Preguntas_Tests);
            this.relationFK_Realizaciones_Tests = new System.Data.DataRelation("FK_Realizaciones_Tests", new System.Data.DataColumn[] {
                        this.tableTests.codigoColumn}, new System.Data.DataColumn[] {
                        this.tableRealizaciones.testColumn}, false);
            this.Relations.Add(this.relationFK_Realizaciones_Tests);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFilasPlantillas() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTests() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePlantillas() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePreguntas() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRealizaciones() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            AutoProgressDataSet ds = new AutoProgressDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void FilasPlantillasRowChangeEventHandler(object sender, FilasPlantillasRowChangeEvent e);
        
        public delegate void TestsRowChangeEventHandler(object sender, TestsRowChangeEvent e);
        
        public delegate void PlantillasRowChangeEventHandler(object sender, PlantillasRowChangeEvent e);
        
        public delegate void PreguntasRowChangeEventHandler(object sender, PreguntasRowChangeEvent e);
        
        public delegate void RealizacionesRowChangeEventHandler(object sender, RealizacionesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FilasPlantillasDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnplantilla;
            
            private System.Data.DataColumn columnnum;
            
            private System.Data.DataColumn columnrespuesta;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilasPlantillasDataTable() {
                this.TableName = "FilasPlantillas";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FilasPlantillasDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FilasPlantillasDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn plantillaColumn {
                get {
                    return this.columnplantilla;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numColumn {
                get {
                    return this.columnnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn respuestaColumn {
                get {
                    return this.columnrespuesta;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilasPlantillasRow this[int index] {
                get {
                    return ((FilasPlantillasRow)(this.Rows[index]));
                }
            }
            
            public event FilasPlantillasRowChangeEventHandler FilasPlantillasRowChanging;
            
            public event FilasPlantillasRowChangeEventHandler FilasPlantillasRowChanged;
            
            public event FilasPlantillasRowChangeEventHandler FilasPlantillasRowDeleting;
            
            public event FilasPlantillasRowChangeEventHandler FilasPlantillasRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFilasPlantillasRow(FilasPlantillasRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilasPlantillasRow AddFilasPlantillasRow(PlantillasRow parentPlantillasRowByFK_FilasPlantillas_Plantillas, int num, string respuesta) {
                FilasPlantillasRow rowFilasPlantillasRow = ((FilasPlantillasRow)(this.NewRow()));
                rowFilasPlantillasRow.ItemArray = new object[] {
                        parentPlantillasRowByFK_FilasPlantillas_Plantillas[0],
                        num,
                        respuesta};
                this.Rows.Add(rowFilasPlantillasRow);
                return rowFilasPlantillasRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilasPlantillasRow FindByplantillanum(string plantilla, int num) {
                return ((FilasPlantillasRow)(this.Rows.Find(new object[] {
                            plantilla,
                            num})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FilasPlantillasDataTable cln = ((FilasPlantillasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FilasPlantillasDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnplantilla = base.Columns["plantilla"];
                this.columnnum = base.Columns["num"];
                this.columnrespuesta = base.Columns["respuesta"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnplantilla = new System.Data.DataColumn("plantilla", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnplantilla);
                this.columnnum = new System.Data.DataColumn("num", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnum);
                this.columnrespuesta = new System.Data.DataColumn("respuesta", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrespuesta);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnplantilla,
                                this.columnnum}, true));
                this.columnplantilla.AllowDBNull = false;
                this.columnplantilla.MaxLength = 10;
                this.columnnum.AllowDBNull = false;
                this.columnrespuesta.AllowDBNull = false;
                this.columnrespuesta.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilasPlantillasRow NewFilasPlantillasRow() {
                return ((FilasPlantillasRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FilasPlantillasRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FilasPlantillasRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FilasPlantillasRowChanged != null)) {
                    this.FilasPlantillasRowChanged(this, new FilasPlantillasRowChangeEvent(((FilasPlantillasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FilasPlantillasRowChanging != null)) {
                    this.FilasPlantillasRowChanging(this, new FilasPlantillasRowChangeEvent(((FilasPlantillasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FilasPlantillasRowDeleted != null)) {
                    this.FilasPlantillasRowDeleted(this, new FilasPlantillasRowChangeEvent(((FilasPlantillasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FilasPlantillasRowDeleting != null)) {
                    this.FilasPlantillasRowDeleting(this, new FilasPlantillasRowChangeEvent(((FilasPlantillasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFilasPlantillasRow(FilasPlantillasRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AutoProgressDataSet ds = new AutoProgressDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FilasPlantillasDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncodigo;
            
            private System.Data.DataColumn columnplantilla;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsDataTable() {
                this.TableName = "Tests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn codigoColumn {
                get {
                    return this.columncodigo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn plantillaColumn {
                get {
                    return this.columnplantilla;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow this[int index] {
                get {
                    return ((TestsRow)(this.Rows[index]));
                }
            }
            
            public event TestsRowChangeEventHandler TestsRowChanging;
            
            public event TestsRowChangeEventHandler TestsRowChanged;
            
            public event TestsRowChangeEventHandler TestsRowDeleting;
            
            public event TestsRowChangeEventHandler TestsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestsRow(TestsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow AddTestsRow(string codigo, PlantillasRow parentPlantillasRowByFK_Tests_Plantillas) {
                TestsRow rowTestsRow = ((TestsRow)(this.NewRow()));
                rowTestsRow.ItemArray = new object[] {
                        codigo,
                        parentPlantillasRowByFK_Tests_Plantillas[0]};
                this.Rows.Add(rowTestsRow);
                return rowTestsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow FindBycodigo(string codigo) {
                return ((TestsRow)(this.Rows.Find(new object[] {
                            codigo})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TestsDataTable cln = ((TestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TestsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncodigo = base.Columns["codigo"];
                this.columnplantilla = base.Columns["plantilla"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncodigo = new System.Data.DataColumn("codigo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncodigo);
                this.columnplantilla = new System.Data.DataColumn("plantilla", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnplantilla);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columncodigo}, true));
                this.columncodigo.AllowDBNull = false;
                this.columncodigo.Unique = true;
                this.columncodigo.MaxLength = 10;
                this.columnplantilla.AllowDBNull = false;
                this.columnplantilla.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow NewTestsRow() {
                return ((TestsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TestsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TestsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestsRowChanged != null)) {
                    this.TestsRowChanged(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestsRowChanging != null)) {
                    this.TestsRowChanging(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestsRowDeleted != null)) {
                    this.TestsRowDeleted(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestsRowDeleting != null)) {
                    this.TestsRowDeleting(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestsRow(TestsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AutoProgressDataSet ds = new AutoProgressDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlantillasDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncodigo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantillasDataTable() {
                this.TableName = "Plantillas";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlantillasDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PlantillasDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn codigoColumn {
                get {
                    return this.columncodigo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantillasRow this[int index] {
                get {
                    return ((PlantillasRow)(this.Rows[index]));
                }
            }
            
            public event PlantillasRowChangeEventHandler PlantillasRowChanging;
            
            public event PlantillasRowChangeEventHandler PlantillasRowChanged;
            
            public event PlantillasRowChangeEventHandler PlantillasRowDeleting;
            
            public event PlantillasRowChangeEventHandler PlantillasRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPlantillasRow(PlantillasRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantillasRow AddPlantillasRow(string codigo) {
                PlantillasRow rowPlantillasRow = ((PlantillasRow)(this.NewRow()));
                rowPlantillasRow.ItemArray = new object[] {
                        codigo};
                this.Rows.Add(rowPlantillasRow);
                return rowPlantillasRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantillasRow FindBycodigo(string codigo) {
                return ((PlantillasRow)(this.Rows.Find(new object[] {
                            codigo})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PlantillasDataTable cln = ((PlantillasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PlantillasDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncodigo = base.Columns["codigo"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncodigo = new System.Data.DataColumn("codigo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncodigo);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columncodigo}, true));
                this.columncodigo.AllowDBNull = false;
                this.columncodigo.Unique = true;
                this.columncodigo.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantillasRow NewPlantillasRow() {
                return ((PlantillasRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PlantillasRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PlantillasRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlantillasRowChanged != null)) {
                    this.PlantillasRowChanged(this, new PlantillasRowChangeEvent(((PlantillasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlantillasRowChanging != null)) {
                    this.PlantillasRowChanging(this, new PlantillasRowChangeEvent(((PlantillasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlantillasRowDeleted != null)) {
                    this.PlantillasRowDeleted(this, new PlantillasRowChangeEvent(((PlantillasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlantillasRowDeleting != null)) {
                    this.PlantillasRowDeleting(this, new PlantillasRowChangeEvent(((PlantillasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePlantillasRow(PlantillasRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AutoProgressDataSet ds = new AutoProgressDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlantillasDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PreguntasDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntest;
            
            private System.Data.DataColumn columnnum;
            
            private System.Data.DataColumn columnveces;
            
            private System.Data.DataColumn columnfallos;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreguntasDataTable() {
                this.TableName = "Preguntas";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PreguntasDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PreguntasDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn testColumn {
                get {
                    return this.columntest;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numColumn {
                get {
                    return this.columnnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn vecesColumn {
                get {
                    return this.columnveces;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fallosColumn {
                get {
                    return this.columnfallos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreguntasRow this[int index] {
                get {
                    return ((PreguntasRow)(this.Rows[index]));
                }
            }
            
            public event PreguntasRowChangeEventHandler PreguntasRowChanging;
            
            public event PreguntasRowChangeEventHandler PreguntasRowChanged;
            
            public event PreguntasRowChangeEventHandler PreguntasRowDeleting;
            
            public event PreguntasRowChangeEventHandler PreguntasRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPreguntasRow(PreguntasRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreguntasRow AddPreguntasRow(TestsRow parentTestsRowByFK_Preguntas_Tests, int num, int veces, int fallos) {
                PreguntasRow rowPreguntasRow = ((PreguntasRow)(this.NewRow()));
                rowPreguntasRow.ItemArray = new object[] {
                        parentTestsRowByFK_Preguntas_Tests[0],
                        num,
                        veces,
                        fallos};
                this.Rows.Add(rowPreguntasRow);
                return rowPreguntasRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreguntasRow FindBytestnum(string test, int num) {
                return ((PreguntasRow)(this.Rows.Find(new object[] {
                            test,
                            num})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PreguntasDataTable cln = ((PreguntasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PreguntasDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntest = base.Columns["test"];
                this.columnnum = base.Columns["num"];
                this.columnveces = base.Columns["veces"];
                this.columnfallos = base.Columns["fallos"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntest = new System.Data.DataColumn("test", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntest);
                this.columnnum = new System.Data.DataColumn("num", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnum);
                this.columnveces = new System.Data.DataColumn("veces", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnveces);
                this.columnfallos = new System.Data.DataColumn("fallos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfallos);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columntest,
                                this.columnnum}, true));
                this.columntest.AllowDBNull = false;
                this.columntest.MaxLength = 10;
                this.columnnum.AllowDBNull = false;
                this.columnveces.AllowDBNull = false;
                this.columnfallos.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreguntasRow NewPreguntasRow() {
                return ((PreguntasRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PreguntasRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PreguntasRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PreguntasRowChanged != null)) {
                    this.PreguntasRowChanged(this, new PreguntasRowChangeEvent(((PreguntasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PreguntasRowChanging != null)) {
                    this.PreguntasRowChanging(this, new PreguntasRowChangeEvent(((PreguntasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PreguntasRowDeleted != null)) {
                    this.PreguntasRowDeleted(this, new PreguntasRowChangeEvent(((PreguntasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PreguntasRowDeleting != null)) {
                    this.PreguntasRowDeleting(this, new PreguntasRowChangeEvent(((PreguntasRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePreguntasRow(PreguntasRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AutoProgressDataSet ds = new AutoProgressDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PreguntasDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RealizacionesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnnum;
            
            private System.Data.DataColumn columntest;
            
            private System.Data.DataColumn columnfecha;
            
            private System.Data.DataColumn columnfallos;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealizacionesDataTable() {
                this.TableName = "Realizaciones";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RealizacionesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RealizacionesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numColumn {
                get {
                    return this.columnnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn testColumn {
                get {
                    return this.columntest;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fechaColumn {
                get {
                    return this.columnfecha;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fallosColumn {
                get {
                    return this.columnfallos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealizacionesRow this[int index] {
                get {
                    return ((RealizacionesRow)(this.Rows[index]));
                }
            }
            
            public event RealizacionesRowChangeEventHandler RealizacionesRowChanging;
            
            public event RealizacionesRowChangeEventHandler RealizacionesRowChanged;
            
            public event RealizacionesRowChangeEventHandler RealizacionesRowDeleting;
            
            public event RealizacionesRowChangeEventHandler RealizacionesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRealizacionesRow(RealizacionesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealizacionesRow AddRealizacionesRow(int num, TestsRow parentTestsRowByFK_Realizaciones_Tests, System.DateTime fecha, int fallos) {
                RealizacionesRow rowRealizacionesRow = ((RealizacionesRow)(this.NewRow()));
                rowRealizacionesRow.ItemArray = new object[] {
                        num,
                        parentTestsRowByFK_Realizaciones_Tests[0],
                        fecha,
                        fallos};
                this.Rows.Add(rowRealizacionesRow);
                return rowRealizacionesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealizacionesRow FindBynumtest(int num, string test) {
                return ((RealizacionesRow)(this.Rows.Find(new object[] {
                            num,
                            test})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RealizacionesDataTable cln = ((RealizacionesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RealizacionesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnum = base.Columns["num"];
                this.columntest = base.Columns["test"];
                this.columnfecha = base.Columns["fecha"];
                this.columnfallos = base.Columns["fallos"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnum = new System.Data.DataColumn("num", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnum);
                this.columntest = new System.Data.DataColumn("test", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntest);
                this.columnfecha = new System.Data.DataColumn("fecha", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfecha);
                this.columnfallos = new System.Data.DataColumn("fallos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfallos);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnnum,
                                this.columntest}, true));
                this.columnnum.AllowDBNull = false;
                this.columntest.AllowDBNull = false;
                this.columntest.MaxLength = 10;
                this.columnfecha.AllowDBNull = false;
                this.columnfallos.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealizacionesRow NewRealizacionesRow() {
                return ((RealizacionesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RealizacionesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RealizacionesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RealizacionesRowChanged != null)) {
                    this.RealizacionesRowChanged(this, new RealizacionesRowChangeEvent(((RealizacionesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RealizacionesRowChanging != null)) {
                    this.RealizacionesRowChanging(this, new RealizacionesRowChangeEvent(((RealizacionesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RealizacionesRowDeleted != null)) {
                    this.RealizacionesRowDeleted(this, new RealizacionesRowChangeEvent(((RealizacionesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RealizacionesRowDeleting != null)) {
                    this.RealizacionesRowDeleting(this, new RealizacionesRowChangeEvent(((RealizacionesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRealizacionesRow(RealizacionesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AutoProgressDataSet ds = new AutoProgressDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RealizacionesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FilasPlantillasRow : System.Data.DataRow {
            
            private FilasPlantillasDataTable tableFilasPlantillas;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FilasPlantillasRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFilasPlantillas = ((FilasPlantillasDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string plantilla {
                get {
                    return ((string)(this[this.tableFilasPlantillas.plantillaColumn]));
                }
                set {
                    this[this.tableFilasPlantillas.plantillaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int num {
                get {
                    return ((int)(this[this.tableFilasPlantillas.numColumn]));
                }
                set {
                    this[this.tableFilasPlantillas.numColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string respuesta {
                get {
                    return ((string)(this[this.tableFilasPlantillas.respuestaColumn]));
                }
                set {
                    this[this.tableFilasPlantillas.respuestaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantillasRow PlantillasRow {
                get {
                    return ((PlantillasRow)(this.GetParentRow(this.Table.ParentRelations["FK_FilasPlantillas_Plantillas"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FilasPlantillas_Plantillas"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestsRow : System.Data.DataRow {
            
            private TestsDataTable tableTests;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTests = ((TestsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string codigo {
                get {
                    return ((string)(this[this.tableTests.codigoColumn]));
                }
                set {
                    this[this.tableTests.codigoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string plantilla {
                get {
                    return ((string)(this[this.tableTests.plantillaColumn]));
                }
                set {
                    this[this.tableTests.plantillaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantillasRow PlantillasRow {
                get {
                    return ((PlantillasRow)(this.GetParentRow(this.Table.ParentRelations["FK_Tests_Plantillas"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Tests_Plantillas"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreguntasRow[] GetPreguntasRows() {
                return ((PreguntasRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Preguntas_Tests"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealizacionesRow[] GetRealizacionesRows() {
                return ((RealizacionesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Realizaciones_Tests"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PlantillasRow : System.Data.DataRow {
            
            private PlantillasDataTable tablePlantillas;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlantillasRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlantillas = ((PlantillasDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string codigo {
                get {
                    return ((string)(this[this.tablePlantillas.codigoColumn]));
                }
                set {
                    this[this.tablePlantillas.codigoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilasPlantillasRow[] GetFilasPlantillasRows() {
                return ((FilasPlantillasRow[])(base.GetChildRows(this.Table.ChildRelations["FK_FilasPlantillas_Plantillas"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow[] GetTestsRows() {
                return ((TestsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Tests_Plantillas"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PreguntasRow : System.Data.DataRow {
            
            private PreguntasDataTable tablePreguntas;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PreguntasRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePreguntas = ((PreguntasDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string test {
                get {
                    return ((string)(this[this.tablePreguntas.testColumn]));
                }
                set {
                    this[this.tablePreguntas.testColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int num {
                get {
                    return ((int)(this[this.tablePreguntas.numColumn]));
                }
                set {
                    this[this.tablePreguntas.numColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int veces {
                get {
                    return ((int)(this[this.tablePreguntas.vecesColumn]));
                }
                set {
                    this[this.tablePreguntas.vecesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fallos {
                get {
                    return ((int)(this[this.tablePreguntas.fallosColumn]));
                }
                set {
                    this[this.tablePreguntas.fallosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow TestsRow {
                get {
                    return ((TestsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Preguntas_Tests"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Preguntas_Tests"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RealizacionesRow : System.Data.DataRow {
            
            private RealizacionesDataTable tableRealizaciones;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RealizacionesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRealizaciones = ((RealizacionesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int num {
                get {
                    return ((int)(this[this.tableRealizaciones.numColumn]));
                }
                set {
                    this[this.tableRealizaciones.numColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string test {
                get {
                    return ((string)(this[this.tableRealizaciones.testColumn]));
                }
                set {
                    this[this.tableRealizaciones.testColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime fecha {
                get {
                    return ((System.DateTime)(this[this.tableRealizaciones.fechaColumn]));
                }
                set {
                    this[this.tableRealizaciones.fechaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fallos {
                get {
                    return ((int)(this[this.tableRealizaciones.fallosColumn]));
                }
                set {
                    this[this.tableRealizaciones.fallosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow TestsRow {
                get {
                    return ((TestsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Realizaciones_Tests"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Realizaciones_Tests"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FilasPlantillasRowChangeEvent : System.EventArgs {
            
            private FilasPlantillasRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilasPlantillasRowChangeEvent(FilasPlantillasRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilasPlantillasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestsRowChangeEvent : System.EventArgs {
            
            private TestsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRowChangeEvent(TestsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PlantillasRowChangeEvent : System.EventArgs {
            
            private PlantillasRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantillasRowChangeEvent(PlantillasRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantillasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PreguntasRowChangeEvent : System.EventArgs {
            
            private PreguntasRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreguntasRowChangeEvent(PreguntasRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreguntasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RealizacionesRowChangeEvent : System.EventArgs {
            
            private RealizacionesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealizacionesRowChangeEvent(RealizacionesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealizacionesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace AutoProgress.AutoProgressDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FilasPlantillasTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FilasPlantillasTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FilasPlantillas";
            tableMapping.ColumnMappings.Add("plantilla", "plantilla");
            tableMapping.ColumnMappings.Add("num", "num");
            tableMapping.ColumnMappings.Add("respuesta", "respuesta");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FilasPlantillas] WHERE (([plantilla] = @Original_plantilla) AN" +
                "D ([num] = @Original_num) AND ([respuesta] = @Original_respuesta))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_plantilla", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "plantilla", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_respuesta", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "respuesta", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FilasPlantillas] ([plantilla], [num], [respuesta]) VALUES (@pl" +
                "antilla, @num, @respuesta);\r\nSELECT plantilla, num, respuesta FROM FilasPlantill" +
                "as WHERE (num = @num) AND (plantilla = @plantilla)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@plantilla", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "plantilla", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@respuesta", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "respuesta", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[FilasPlantillas] SET [plantilla] = @plantilla, [num] = @num, [respuesta] = @respuesta WHERE (([plantilla] = @Original_plantilla) AND ([num] = @Original_num) AND ([respuesta] = @Original_respuesta));
SELECT plantilla, num, respuesta FROM FilasPlantillas WHERE (num = @num) AND (plantilla = @plantilla)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@plantilla", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "plantilla", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@respuesta", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "respuesta", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_plantilla", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "plantilla", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_respuesta", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "respuesta", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::AutoProgress.Properties.Settings.Default.AutoProgressConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT plantilla, num, respuesta FROM dbo.FilasPlantillas";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AutoProgressDataSet.FilasPlantillasDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AutoProgressDataSet.FilasPlantillasDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AutoProgressDataSet.FilasPlantillasDataTable dataTable = new AutoProgressDataSet.FilasPlantillasDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AutoProgressDataSet.FilasPlantillasDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AutoProgressDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FilasPlantillas");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_plantilla, int Original_num, string Original_respuesta) {
            if ((Original_plantilla == null)) {
                throw new System.ArgumentNullException("Original_plantilla");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_plantilla));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_num));
            if ((Original_respuesta == null)) {
                throw new System.ArgumentNullException("Original_respuesta");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_respuesta));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string plantilla, int num, string respuesta) {
            if ((plantilla == null)) {
                throw new System.ArgumentNullException("plantilla");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(plantilla));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(num));
            if ((respuesta == null)) {
                throw new System.ArgumentNullException("respuesta");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(respuesta));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string plantilla, int num, string respuesta, string Original_plantilla, int Original_num, string Original_respuesta) {
            if ((plantilla == null)) {
                throw new System.ArgumentNullException("plantilla");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(plantilla));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(num));
            if ((respuesta == null)) {
                throw new System.ArgumentNullException("respuesta");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(respuesta));
            }
            if ((Original_plantilla == null)) {
                throw new System.ArgumentNullException("Original_plantilla");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_plantilla));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_num));
            if ((Original_respuesta == null)) {
                throw new System.ArgumentNullException("Original_respuesta");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_respuesta));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TestsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TestsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Tests";
            tableMapping.ColumnMappings.Add("codigo", "codigo");
            tableMapping.ColumnMappings.Add("plantilla", "plantilla");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Tests] WHERE (([codigo] = @Original_codigo) AND ([plantilla] =" +
                " @Original_plantilla))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_codigo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_plantilla", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "plantilla", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Tests] ([codigo], [plantilla]) VALUES (@codigo, @plantilla);\r\n" +
                "SELECT codigo, plantilla FROM Tests WHERE (codigo = @codigo)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@codigo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@plantilla", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "plantilla", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Tests] SET [codigo] = @codigo, [plantilla] = @plantilla WHERE (([co" +
                "digo] = @Original_codigo) AND ([plantilla] = @Original_plantilla));\r\nSELECT codi" +
                "go, plantilla FROM Tests WHERE (codigo = @codigo)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@codigo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@plantilla", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "plantilla", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_codigo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_plantilla", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "plantilla", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::AutoProgress.Properties.Settings.Default.AutoProgressConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT codigo, plantilla FROM dbo.Tests";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AutoProgressDataSet.TestsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AutoProgressDataSet.TestsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AutoProgressDataSet.TestsDataTable dataTable = new AutoProgressDataSet.TestsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AutoProgressDataSet.TestsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AutoProgressDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Tests");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_codigo, string Original_plantilla) {
            if ((Original_codigo == null)) {
                throw new System.ArgumentNullException("Original_codigo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_codigo));
            }
            if ((Original_plantilla == null)) {
                throw new System.ArgumentNullException("Original_plantilla");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_plantilla));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string codigo, string plantilla) {
            if ((codigo == null)) {
                throw new System.ArgumentNullException("codigo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(codigo));
            }
            if ((plantilla == null)) {
                throw new System.ArgumentNullException("plantilla");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(plantilla));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string codigo, string plantilla, string Original_codigo, string Original_plantilla) {
            if ((codigo == null)) {
                throw new System.ArgumentNullException("codigo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(codigo));
            }
            if ((plantilla == null)) {
                throw new System.ArgumentNullException("plantilla");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(plantilla));
            }
            if ((Original_codigo == null)) {
                throw new System.ArgumentNullException("Original_codigo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_codigo));
            }
            if ((Original_plantilla == null)) {
                throw new System.ArgumentNullException("Original_plantilla");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_plantilla));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PlantillasTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PlantillasTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Plantillas";
            tableMapping.ColumnMappings.Add("codigo", "codigo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Plantillas] WHERE (([codigo] = @Original_codigo))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_codigo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Plantillas] ([codigo]) VALUES (@codigo);\r\nSELECT codigo FROM P" +
                "lantillas WHERE (codigo = @codigo)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@codigo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Plantillas] SET [codigo] = @codigo WHERE (([codigo] = @Original_cod" +
                "igo));\r\nSELECT codigo FROM Plantillas WHERE (codigo = @codigo)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@codigo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_codigo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::AutoProgress.Properties.Settings.Default.AutoProgressConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT codigo FROM dbo.Plantillas";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AutoProgressDataSet.PlantillasDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AutoProgressDataSet.PlantillasDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AutoProgressDataSet.PlantillasDataTable dataTable = new AutoProgressDataSet.PlantillasDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AutoProgressDataSet.PlantillasDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AutoProgressDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Plantillas");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_codigo) {
            if ((Original_codigo == null)) {
                throw new System.ArgumentNullException("Original_codigo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_codigo));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string codigo) {
            if ((codigo == null)) {
                throw new System.ArgumentNullException("codigo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(codigo));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string codigo, string Original_codigo) {
            if ((codigo == null)) {
                throw new System.ArgumentNullException("codigo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(codigo));
            }
            if ((Original_codigo == null)) {
                throw new System.ArgumentNullException("Original_codigo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Original_codigo));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PreguntasTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PreguntasTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Preguntas";
            tableMapping.ColumnMappings.Add("test", "test");
            tableMapping.ColumnMappings.Add("num", "num");
            tableMapping.ColumnMappings.Add("veces", "veces");
            tableMapping.ColumnMappings.Add("fallos", "fallos");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Preguntas] WHERE (([test] = @Original_test) AND ([num] = @Orig" +
                "inal_num) AND ([veces] = @Original_veces) AND ([fallos] = @Original_fallos))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_test", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "test", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_veces", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "veces", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fallos", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fallos", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Preguntas] ([test], [num], [veces], [fallos]) VALUES (@test, @" +
                "num, @veces, @fallos);\r\nSELECT test, num, veces, fallos FROM Preguntas WHERE (nu" +
                "m = @num) AND (test = @test)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@test", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "test", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@veces", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "veces", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fallos", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fallos", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Preguntas] SET [test] = @test, [num] = @num, [veces] = @veces, [fallos] = @fallos WHERE (([test] = @Original_test) AND ([num] = @Original_num) AND ([veces] = @Original_veces) AND ([fallos] = @Original_fallos));
SELECT test, num, veces, fallos FROM Preguntas WHERE (num = @num) AND (test = @test)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@test", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "test", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@veces", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "veces", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fallos", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fallos", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_test", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "test", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_veces", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "veces", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fallos", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fallos", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::AutoProgress.Properties.Settings.Default.AutoProgressConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT test, num, veces, fallos FROM dbo.Preguntas";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AutoProgressDataSet.PreguntasDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AutoProgressDataSet.PreguntasDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AutoProgressDataSet.PreguntasDataTable dataTable = new AutoProgressDataSet.PreguntasDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AutoProgressDataSet.PreguntasDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AutoProgressDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Preguntas");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_test, int Original_num, int Original_veces, int Original_fallos) {
            if ((Original_test == null)) {
                throw new System.ArgumentNullException("Original_test");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_test));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_num));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_veces));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_fallos));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string test, int num, int veces, int fallos) {
            if ((test == null)) {
                throw new System.ArgumentNullException("test");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(test));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(num));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(veces));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(fallos));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string test, int num, int veces, int fallos, string Original_test, int Original_num, int Original_veces, int Original_fallos) {
            if ((test == null)) {
                throw new System.ArgumentNullException("test");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(test));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(num));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(veces));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(fallos));
            if ((Original_test == null)) {
                throw new System.ArgumentNullException("Original_test");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_test));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_num));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_veces));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_fallos));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RealizacionesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RealizacionesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Realizaciones";
            tableMapping.ColumnMappings.Add("num", "num");
            tableMapping.ColumnMappings.Add("test", "test");
            tableMapping.ColumnMappings.Add("fecha", "fecha");
            tableMapping.ColumnMappings.Add("fallos", "fallos");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Realizaciones] WHERE (([num] = @Original_num) AND ([test] = @O" +
                "riginal_test) AND ([fecha] = @Original_fecha) AND ([fallos] = @Original_fallos))" +
                "";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_test", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "test", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fecha", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fallos", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fallos", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Realizaciones] ([num], [test], [fecha], [fallos]) VALUES (@num" +
                ", @test, @fecha, @fallos);\r\nSELECT num, test, fecha, fallos FROM Realizaciones W" +
                "HERE (num = @num) AND (test = @test)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@test", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "test", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fecha", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fallos", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fallos", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Realizaciones] SET [num] = @num, [test] = @test, [fecha] = @fecha, [fallos] = @fallos WHERE (([num] = @Original_num) AND ([test] = @Original_test) AND ([fecha] = @Original_fecha) AND ([fallos] = @Original_fallos));
SELECT num, test, fecha, fallos FROM Realizaciones WHERE (num = @num) AND (test = @test)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@test", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "test", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fecha", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fallos", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fallos", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_num", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "num", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_test", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "test", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fecha", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fallos", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fallos", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::AutoProgress.Properties.Settings.Default.AutoProgressConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT num, test, fecha, fallos FROM dbo.Realizaciones";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AutoProgressDataSet.RealizacionesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AutoProgressDataSet.RealizacionesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AutoProgressDataSet.RealizacionesDataTable dataTable = new AutoProgressDataSet.RealizacionesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AutoProgressDataSet.RealizacionesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AutoProgressDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Realizaciones");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_num, string Original_test, System.DateTime Original_fecha, int Original_fallos) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_num));
            if ((Original_test == null)) {
                throw new System.ArgumentNullException("Original_test");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_test));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_fecha));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_fallos));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int num, string test, System.DateTime fecha, int fallos) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(num));
            if ((test == null)) {
                throw new System.ArgumentNullException("test");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(test));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(fecha));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(fallos));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int num, string test, System.DateTime fecha, int fallos, int Original_num, string Original_test, System.DateTime Original_fecha, int Original_fallos) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(num));
            if ((test == null)) {
                throw new System.ArgumentNullException("test");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(test));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(fecha));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(fallos));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_num));
            if ((Original_test == null)) {
                throw new System.ArgumentNullException("Original_test");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_test));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(Original_fecha));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_fallos));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591